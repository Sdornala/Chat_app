{"version":3,"sources":["Components/LoginForm.jsx","Components/MyMessage.jsx","Components/TheirMessage.jsx","Components/MessageForm.jsx","Components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","loadChat","a","authObject","axios","get","headers","localStorage","setItem","handleSubmit","e","preventDefault","window","location","reload","onSignIn","googleuser","profile","getBasicProfile","console","log","getId","getName","getImageUrl","getEmail","id_token","getAuthResponse","className","onSubmit","type","value","onChange","target","placeholder","required","align","clientId","onSuccess","onFailure","res","MyMessage","message","attachments","length","src","file","alt","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","bind","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDom","render","document","getElementById"],"mappings":"0PAmHeA,EA5GG,WAEd,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAQ,uCAAG,4BAAAC,EAAA,6DACPC,EAAa,CAAE,aATX,uCASoC,YAAaR,EAAU,cAAeE,GADvE,SAEPO,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IAFjD,OAGbI,aAAaC,QAAQ,WAAYb,GACjCY,aAAaC,QAAQ,WAAYX,GAJpB,2CAAH,qDAORY,EAAY,uCAAG,WAAOC,GAAP,SAAAR,EAAA,6DACjBQ,EAAEC,iBADe,kBAIPV,IAJO,OAMbM,aAAaC,QAAQ,WAAYb,GACjCY,aAAaC,QAAQ,WAAYX,GAEjCe,OAAOC,SAASC,SAChBd,EAAS,IAVI,kDAYbA,EAAS,gCAZI,0DAAH,sDAgBZe,EAAQ,uCAAG,WAAOC,GAAP,mBAAAd,EAAA,yDACTe,EAAUD,EAAWE,kBACzBC,QAAQC,IAAI,OAASH,EAAQI,SAC7BF,QAAQC,IAAI,SAAWH,EAAQK,WAC/BH,QAAQC,IAAI,cAAgBH,EAAQM,eACpCJ,QAAQC,IAAI,UAAYH,EAAQO,YAC1B7B,EAAWsB,EAAQK,UAErBG,EAAWT,EAAWU,kBAAkBD,SAC5CN,QAAQC,IAAI,aAAeK,IAExBR,EAXU,kCAYHhB,EAASN,GAZN,QAcTiB,OAAOC,SAASC,SAdP,4CAAH,sDAgDd,OACI,qBAAKa,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,8BACA,uBAAMC,SAAUnB,EAAhB,UACI,uBAAOoB,KAAK,OAAOC,MAAOnC,EAAUoC,SAAU,SAACrB,GAAD,OAAOd,EAAYc,EAAEsB,OAAOF,QAAQH,UAAU,QAAQM,YAAY,WAAWC,UAAQ,IACnI,uBAAOL,KAAK,WAAWC,MAAOjC,EAAUkC,SAAU,SAACrB,GAAD,OAAOZ,EAAYY,EAAEsB,OAAOF,QAAQH,UAAU,QAAQM,YAAY,WAAWC,UAAQ,IACvI,qBAAKC,MAAM,SAAX,SACI,wBAAQN,KAAK,SAASF,UAAU,SAAhC,SACI,sDAGR,qBAAKA,UAAU,QAAf,SAEI,cAAC,IAAD,CACIS,SAAU,2EACVC,UAAWtB,EACXuB,UArBA,SAACC,GACrBpB,QAAQC,IAAI,sBAAuBmB,IAqBfX,SAAUnB,EAJd,SAMI,6DAIZ,6BAAKV,UCzFJyC,EAnBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OAAIA,EAAQC,aAAeD,EAAQC,YAAYC,OAAS,EAEpD,qBACEC,IAAKH,EAAQC,YAAY,GAAGG,KAC5BC,IAAI,qBACJnB,UAAU,gBACVoB,MAAO,CAAEC,MAAO,WAMpB,qBAAKrB,UAAU,UAAUoB,MAAO,CAAEC,MAAO,QAASC,YAAa,OAAQC,MAAO,QAASC,gBAAiB,WAAxG,SACGV,EAAQW,QCeAC,EA7BI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAab,EAAc,EAAdA,QAC3Bc,GAAwBD,GAAeA,EAAYE,OAAO7D,WAAa8C,EAAQe,OAAO7D,SAE5F,OACE,sBAAKgC,UAAU,cAAf,UACG4B,GACC,qBACE5B,UAAU,iBACVoB,MAAO,CAAEU,gBAAiBhB,EAAQe,QAAR,cAAyBf,EAAQe,OAAOE,OAAxC,QAG7BjB,EAAQC,aAAeD,EAAQC,YAAYC,OAAS,EAEjD,qBACEC,IAAKH,EAAQC,YAAY,GAAGG,KAC5BC,IAAI,qBACJnB,UAAU,gBACVoB,MAAO,CAAEY,WAAYJ,EAAuB,MAAQ,UAItD,qBAAK5B,UAAU,UAAUoB,MAAO,CAAEC,MAAO,OAAQG,gBAAiB,UAAWQ,WAAYJ,EAAuB,MAAQ,QAAxH,SACGd,EAAQW,W,gBCoCRQ,EAtDK,SAACC,GACnB,MAA0BnE,mBAAS,IAAnC,mBAAOoC,EAAP,KAAcgC,EAAd,KACQC,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,MAQVvD,EAAe,SAACwD,GACpBA,EAAMtD,iBAEN,IAAMyC,EAAOtB,EAAMoC,OAEfd,EAAKT,OAAS,GAChBwB,YAAYH,EAAOD,EAAQ,CAAEX,SAG/BU,EAAS,KAOX,OACE,uBAAMnC,UAAU,eAAeC,SAAUnB,EAAzC,UACE,uBACEkB,UAAU,gBACVM,YAAY,oBACZH,MAAOA,EACPC,SA5Be,SAACkC,GACpBH,EAASG,EAAMjC,OAAOF,OAEtBsC,YAASP,EAAOE,IA0BZnC,SAAUnB,IAEZ,uBAAO4D,QAAQ,gBAAf,SACE,sBAAM1C,UAAU,eAAhB,SACE,cAAC2C,EAAA,EAAD,CAAiB3C,UAAU,qBAG/B,uBACEE,KAAK,OACL0C,UAAU,EACVC,GAAG,gBACHzB,MAAO,CAAE0B,QAAS,QAClB1C,SAvBe,SAACkC,GACpBE,YAAYH,EAAOD,EAAQ,CAAEW,MAAOT,EAAMjC,OAAO0C,MAAOtB,KAAM,MAsBnCuB,K,aAEzB,wBAAQ9C,KAAK,SAASF,UAAU,cAAhC,SACE,cAACiD,EAAA,EAAD,CAAcjD,UAAU,oBCUjBkD,EA1DE,SAAChB,GACd,IAAQiB,EAA0CjB,EAA1CiB,MAAOC,EAAmClB,EAAnCkB,WAAYC,EAAuBnB,EAAvBmB,SAAUC,EAAapB,EAAboB,SAE/BC,EAAOJ,GAASA,EAAMC,GAEtBI,EAAqB,SAAC1C,EAAS2C,GAAV,OAA0BF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,OAAmBD,EAAOE,YAAchD,EAAQ+B,IACjH,qBAEI7C,UAAU,eACVoB,MAAO,CACHC,MAAOoC,EAAc,QAAU,OAC/B3B,gBAAiB8B,EAAOA,OAAO7B,QAAd,cAA+B6B,EAAOA,OAAO7B,OAA7C,OALzB,eACiB8B,QAgCrB,OAAKN,EAGD,sBAAKvD,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,gBAA6BuD,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAMQ,QACnC,qBAAK/D,UAAU,gBAAf,SACKuD,EAAKG,OAAOC,KAAI,SAACC,GAAD,iBAAgBA,EAAOA,OAAO5F,kBA9BxC,WACnB,IAAMgG,EAAOC,OAAOD,KAAKV,GAEzB,OAAOU,EAAKL,KAAI,SAACO,EAAKL,GAClB,IAAM/C,EAAUwC,EAASY,GACnBC,EAA2B,IAAVN,EAAc,KAAOG,EAAKH,EAAQ,GACnDJ,EAAcJ,IAAavC,EAAQe,OAAO7D,SAEhD,OACI,sBAA0BoD,MAAO,CAAEgD,MAAO,QAA1C,UACI,qBAAKpE,UAAU,gBAAf,SACKyD,EACK,cAAC,EAAD,CAAW3C,QAASA,IACpB,cAAC,EAAD,CAAcA,QAASA,EAASa,YAAa2B,EAASa,OAEhE,qBAAKnE,UAAU,gBAAgBoB,MAAO,CAAEE,YAAamC,EAAc,OAAS,MAAOzB,WAAYyB,EAAc,MAAQ,QAArH,SACKD,EAAmB1C,EAAS2C,OAPrC,cAAiBI,OAwBpBQ,GACD,qBAAKjD,MAAO,CAAEkD,OAAQ,WACtB,qBAAKtE,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAiBkC,GAAjB,IAAwBE,OAAQgB,UAb1B,yBClBPmB,G,MAhBH,WACR,OAAK3F,aAAa4F,QAAQ,YAGtB,cAAC,IAAD,CACIF,OAAO,QACPG,UARM,uCASNpB,SAAUzE,aAAa4F,QAAQ,YAC/BE,WAAY9F,aAAa4F,QAAQ,YACjCG,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OARV,cAAC,EAAD,MCLlDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d5913b07.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport GoogleLogin from 'react-google-login';\r\n\r\n\r\nconst projectID = 'cce48a03-41d8-4330-8908-81c77b304a0b';\r\n\r\nconst LoginForm = () => {\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const loadChat = async () => {\r\n        const authObject = { 'Project-ID': projectID, 'User-Name': username, 'User-Secret': password };\r\n        await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n        localStorage.setItem('username', username);\r\n        localStorage.setItem('password', password);        \r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            await loadChat();\r\n\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n            setError('');\r\n        } catch (err) {\r\n            setError('Oops, incorrect credentials.');\r\n        }\r\n    };\r\n\r\n    const onSignIn = async (googleuser) => {\r\n        var profile = googleuser.getBasicProfile();\r\n        console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\r\n        console.log('Name: ' + profile.getName());\r\n        console.log('Image URL: ' + profile.getImageUrl());\r\n        console.log('Email: ' + profile.getEmail());\r\n        const username = profile.getName();\r\n\r\n        var id_token = googleuser.getAuthResponse().id_token;\r\n        console.log(\"ID Token: \" + id_token);\r\n\r\n        if(profile) {\r\n            await loadChat(username);\r\n\r\n            window.location.reload();\r\n        }\r\n    }\r\n   \r\n\r\n\r\n    // const refreshTokenSetup = res => {\r\n    //     // Timing to renew access token\r\n    //     let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n\r\n    //     const refreshToken = async () => {\r\n    //         const newAuthRes = await res.reloadAuthResponse();\r\n    //         refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n\r\n    //         // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n\r\n    //         // Setup the other timer after the first one\r\n    //         setTimeout(refreshToken, refreshTiming);\r\n    //     };\r\n\r\n    //     // Setup first refresh timer\r\n    //     setTimeout(refreshToken, refreshTiming);\r\n    // };\r\n\r\n\r\n    // const successResponse = (res) => {\r\n    //     console.log('[Login Suceess] currentUser:', res.profileObj);\r\n    //     refreshTokenSetup(res);\r\n    // };\r\n\r\n    const failureResponse = (res) => {\r\n        console.log('[Login failed] res:', res);\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"login\">\r\n\r\n                        <GoogleLogin\r\n                            clientId={'987871101716-6m5m2hje57vjbnc8ql62mi3k4l4tdt40.apps.googleusercontent.com'}\r\n                            onSuccess={onSignIn}\r\n                            onFailure={failureResponse}\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            <span> Login with Google</span>\r\n                        </GoogleLogin>\r\n                    </div>\r\n                </form>\r\n                <h1>{error}</h1>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default LoginForm;","const MyMessage = ({ message }) => {\r\n    if (message.attachments && message.attachments.length > 0) {\r\n      return (\r\n        <img\r\n          src={message.attachments[0].file}\r\n          alt=\"message-attachment\"\r\n          className=\"message-image\"\r\n          style={{ float: 'right' }}\r\n        />\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n        {message.text}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n  \r\n    return (\r\n      <div className=\"message-row\">\r\n        {isFirstMessageByUser && (\r\n          <div\r\n            className=\"message-avatar\"\r\n            style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\r\n          />\r\n        )}\r\n        {message.attachments && message.attachments.length > 0\r\n          ? (\r\n            <img\r\n              src={message.attachments[0].file}\r\n              alt=\"message-attachment\"\r\n              className=\"message-image\"\r\n              style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n            />\r\n          )\r\n          : (\r\n            <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n              {message.text}\r\n            </div>\r\n          )}\r\n      </div>\r\n    ); \r\n  };\r\n  \r\n  export default TheirMessage;","import { useState } from 'react';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState('');\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n    }\r\n\r\n    setValue('');\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n  };\r\n\r\n  return (\r\n    <form className=\"message-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"message-input\"\r\n        placeholder=\"Send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleUpload.bind(this)}\r\n      />\r\n      <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageForm;","import MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport MessageForm from './MessageForm';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\r\n        <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n                float: isMyMessage ? 'right' : 'left',\r\n                backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n            }}\r\n        />\r\n    ));\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    if (!chat) return <div />;\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => ` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\nimport LoginForm from './Components/LoginForm';\r\nimport ChatFeed from './Components/ChatFeed';\r\n\r\n\r\nimport './App.css';\r\n\r\nconst projectID = 'cce48a03-41d8-4330-8908-81c77b304a0b';\r\n\r\nconst App = () => {\r\n    if (!localStorage.getItem('username')) return <LoginForm />;\r\n    \r\n    return (\r\n        <ChatEngine\r\n            height=\"100vh\"\r\n            projectID={projectID}\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n        />\r\n        \r\n    )\r\n\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}